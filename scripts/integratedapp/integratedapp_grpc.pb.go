// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package integratedapp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// IntegratedAppsClient is the client API for IntegratedApps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegratedAppsClient interface {
	// Notify the integrated application about the message
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error)
}

type integratedAppsClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegratedAppsClient(cc grpc.ClientConnInterface) IntegratedAppsClient {
	return &integratedAppsClient{cc}
}

func (c *integratedAppsClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error) {
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, "/integratedapp.IntegratedApps/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegratedAppsServer is the server API for IntegratedApps service.
// All implementations must embed UnimplementedIntegratedAppsServer
// for forward compatibility
type IntegratedAppsServer interface {
	// Notify the integrated application about the message
	Notify(context.Context, *NotifyRequest) (*NotifyResponse, error)
	mustEmbedUnimplementedIntegratedAppsServer()
}

// UnimplementedIntegratedAppsServer must be embedded to have forward compatible implementations.
type UnimplementedIntegratedAppsServer struct {
}

func (UnimplementedIntegratedAppsServer) Notify(context.Context, *NotifyRequest) (*NotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedIntegratedAppsServer) mustEmbedUnimplementedIntegratedAppsServer() {}

// UnsafeIntegratedAppsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegratedAppsServer will
// result in compilation errors.
type UnsafeIntegratedAppsServer interface {
	mustEmbedUnimplementedIntegratedAppsServer()
}

func RegisterIntegratedAppsServer(s grpc.ServiceRegistrar, srv IntegratedAppsServer) {
	s.RegisterService(&_IntegratedApps_serviceDesc, srv)
}

func _IntegratedApps_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegratedAppsServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integratedapp.IntegratedApps/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegratedAppsServer).Notify(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IntegratedApps_serviceDesc = grpc.ServiceDesc{
	ServiceName: "integratedapp.IntegratedApps",
	HandlerType: (*IntegratedAppsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _IntegratedApps_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integratedapp.proto",
}
